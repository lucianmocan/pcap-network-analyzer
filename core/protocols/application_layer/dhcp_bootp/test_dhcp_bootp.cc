#include "dhcp_bootp.h"
#include <cassert>

void test_parse_bootp()
{
    uint8_t bootp_packet[] = {
        0x01,  // op (Boot Request)
        0x01,  // htype (Ethernet)
        0x06,  // hlen (6 bytes for MAC address)
        0x00,  // hops
        0x39, 0x67, 0x8A, 0x1F,  // xid (Transaction ID)
        0x00, 0x00,  // secs
        0x00, 0x00,  // flags
        0xC0, 0xA8, 0x01, 0x01,  // ciaddr
        0xC0, 0xA8, 0x01, 0x02,  // yiaddr (Your IP Address)
        0x00, 0x00, 0x00, 0x00,  // siaddr (Server IP Address)
        0x00, 0x00, 0x00, 0x00,  // giaddr (Gateway IP Address)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // chaddr (Client MAC address)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, // sname
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // file
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // file
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x63, 0x82, 0x53, 0x63,  // Magic cookie
        0x35, 0x01, 0x01  // options / vendor specific
    };

    my_dhcp_bootp_header_t bootp_header = parse_bootp(bootp_packet, false);

    assert(bootp_header.bp_op == BOOTREQUEST);
    assert(bootp_header.bp_op_desc == "BOOTREQUEST");
    assert(bootp_header.bp_htype == 1);
    assert(bootp_header.bp_htype_desc == "Ethernet");
    assert(bootp_header.bp_hlen == 6);
    assert(bootp_header.bp_xid == 0x39678A1F);
    assert(bootp_header.bp_secs == 0);
    assert(bootp_header.dhcp_flags_bp_unused == 0);
    assert(bootp_header.client_ip_address == "192.168.1.1");
    assert(bootp_header.your_ip_address == "192.168.1.2");
    assert(bootp_header.server_ip_address == "");
    assert(bootp_header.gateway_ip_address == "");
    assert(bootp_header.client_hardware_address == "00:00:00:00:00:00");
    assert(bootp_header.server_host_name == "");
    assert(bootp_header.boot_file_name == "");
    assert(bootp_header.magic_cookie == 0x63825363);

    // for (int i = 0; i < strlen((char*)bootp_header.vendor_specific_area); i++)
    // {
    //     printf("%x ", bootp_header.vendor_specific_area[i]);
    // }
    free_dhcp_bootp_header(&bootp_header);
}

void test_parse_dhcp()
{
    uint8_t dhcp_packet[] = {
    0x02, 0x01, 0x06, 0x00,
    0x6c, 0x04, 0xab, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x4f, 
    0x4b, 0x5e, 0x82, 0x4f, 0x4b, 0x56, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc8, 0x8c, 
    0xc0, 0x79, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, // sname
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // file
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // file
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x63, 0x82, 0x53, 0x63, 0x35, 0x01, 0x02, 0x36, 
    0x04, 0x82, 0x4f, 0x4b, 0x56, 0x33, 0x04, 0x00, 0x01, 0x51, 0x80, 0x01, 
    0x04, 0xff, 0xff, 0xff, 0x00, 0x0f, 0x0d, 0x75, 0x2d, 0x73, 0x74, 0x72, 
    0x61, 0x73, 0x62, 0x67, 0x2e, 0x66, 0x72, 0x00, 0x03, 0x04, 0x82, 0x4f, 
    0x4b, 0xfe, 0x06, 0x0c, 0x82, 0x4f, 0x4b, 0x55, 0x82, 0x4f, 0x4b, 0x02, 
    0x82, 0x4f, 0xc8, 0x01, 0xff, 0x00, 0x00, 0x00
    };

    my_dhcp_bootp_header_t dhcp_header = parse_bootp(dhcp_packet, false);

    assert(dhcp_header.bp_op == BOOTREPLY);
    assert(dhcp_header.bp_op_desc == "BOOTREPLY");
    assert(dhcp_header.bp_htype == 1);
    assert(dhcp_header.bp_htype_desc == "Ethernet");
    assert(dhcp_header.bp_hlen == 6);
    assert(dhcp_header.bp_xid == 0x6c04ab58);
    assert(dhcp_header.bp_secs == 0);
    assert(dhcp_header.dhcp_flags_bp_unused == 0);

    assert(dhcp_header.client_ip_address == "");
    assert(dhcp_header.your_ip_address == "130.79.75.94");
    assert(dhcp_header.server_ip_address == "130.79.75.86");
    assert(dhcp_header.gateway_ip_address == "");
    assert(dhcp_header.client_hardware_address == "80:c8:8c:c0:79:00");
    assert(dhcp_header.server_host_name == "");
    assert(dhcp_header.boot_file_name == "");
    assert(dhcp_header.magic_cookie == 0x63825363);

    // node_t *tmp = dhcp_header.dhcp_options;
    // int i = 0;
    // for (; tmp != NULL; tmp = tmp->next)
    // {
    //     my_dhcp_option_t *option = (my_dhcp_option_t *)tmp->data;
    //     printf("\n--------------------\n");
    //     printf("Option code: %d\n", option->option_code);
    //     printf("Option code desc: %s\n", option->option_code_desc);
    //     printf("Option length: %d\n", option->option_length);
    //     printf("Option value: %d\n", option->option_value);
    //     printf("Option value desc: %s\n", option->option_value_desc);
    //     i++;
    // }
    // printf("Number of options: %d\n", i);

    free_dhcp_bootp_header(&dhcp_header);
}

int main()
{
    test_parse_bootp();
    test_parse_dhcp();
    return 0;
}